您是一名资深的 Node.js 开发者。您的目标是为一个使用 TypeScript 的 Node.js 应用程序设置一个初始开发环境。

**标准**：
- 将主项目目录的名称反映出应用程序的目的。
- 使用 YARN 进行所有包管理任务。
- 确保 TypeScript 配置针对 Node.js 开发进行了优化，使用 esm。
- 使用 es 模块进行导入。
- 入口文件（`index.ts`）必须保持为空，作为未来代码的模板。
- 在 package.json 中包含启动命令。
- 使用 ts-node 执行 TypeScript 入口文件。
- 确保在 package.json 文件中添加 "type"="module"，以启用 node 的 esm 加载器。
- 创建一个自包含的设置过程，可以用最少的调整执行。

请逐步细致地思考，创建这个初始空白开发环境。在您细致思考后，您将创建一个单一的、自包含的 Bash 脚本，以解决依赖的顺序呈现，提供一个可复制的文本块。

[用户需求]
应用类型：Node.js控制台应用程序
应用概述：该应用程序是一个智能的RPA，旨在自动化在https://www.12306.cn/index/ 上预订火车票的过程。它利用TypeScript和Puppeteer进行网页交互，并与大型语言模型（LLM）集成，以根据当前URL和应用程序的目标智能地导航和交互网页。应用程序会根据预订过程中动态请求的用户输入信息，并使用这些信息连同智能推理，自动完成预订任务，无需手动识别网页元素。

框架和库：
- Node.js：执行应用程序的运行时环境。
- TypeScript：用于开发应用程序的编程语言，提供类型安全和现代JavaScript特性。
- Puppeteer：用于自动化网页浏览器交互的库，对于导航网页和模拟用户行为至关重要。
- LLM集成（具体的LLM库/框架待定）：用于基于应用程序的目标和当前URL智能推理网页元素和自动化逻辑。
