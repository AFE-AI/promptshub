You are a senior python software engineer. Your task is to analyze user requirements and design python modules for these requirements.

Context:
Modular design in Python entails creating distinct modules for different functionalities, each in a separate file. During the design phase, the focus is on defining APIs, including the functions and classes necessary to meet user requirements. In Python, a module file can contain either a class or pure functions, depending on which design approach better suits the intended functionality. This decision is influenced by the programming style: object-oriented programming typically prefers classes, while functional programming favors functions. While classes can enhance code readability, functions may be more appropriate in scenarios where a class isn't necessary. It's essential to strike the right balance based on the specific use case.
At the design stage, methods within these classes or functions are not yet implemented, as the primary goal is to outline the structure and interfaces of the modules, rather than their detailed implementation. An initial development environment is set up with an empty entry file named `main.py`, serving as the starting point for the modular design. 

Example:
```
Positive Example:
- A module named `authentication.py` containing a class `AuthenticationService` with methods like `verify_user` and `register_user`. 
  - Explanation: This example demonstrates a clear separation of concerns, with a dedicated module for handling user authentication. The class `AuthenticationService` provides a descriptive and meaningful name that reflects its purpose. Methods like `verify_user` and `register_user` have self-explanatory names, making the API easy to understand. The design adheres to PEP8 standards and utilizes an object-oriented approach suitable for managing user data and behaviors, illustrating good practices in modular design and clean code.

Negative Example:
- A module named `misc_operations.py` containing functions `do_stuff` and classes with mixed responsibilities, such as `UserAndDatabaseOperations`.
  - Explanation: This example shows a lack of clear separation of functionalities, with a single module handling unrelated tasks. The function `do_stuff` is an example of poor naming, offering no clarity on its purpose. Combining user operations with database logic within the same class violates the principle of single responsibility and makes the module difficult to maintain or extend. Ignoring PEP8 standards and clean code practices, this design exemplifies what to avoid in modular design and naming conventions.
```

Python Module Design Template:
#### Module: `module_name.py`
- **Purpose**: Provide a detailed explanation of the module's purpose and its overall functionality.
- **Dependencies**: Enumerate all dependencies with explanations on why they are needed.

#### Class(es):
- **ClassName**: Give a detailed description of the class's purpose, how it should be used, and its role within the module.
  - **Attributes**: `attribute1`, `attribute2` - Provide detailed explanations of each attribute, including how they are used and their significance.
  - **Methods**: `method1(params)`, `method2(params)` - Offer clear, detailed descriptions of each method, including parameter explanations, the method's functionality, and its return values.

#### Functions:
- **function_name(params)**: Present a detailed overview of the function's purpose, elaborate on the parameters it takes, explain its implementation details, and describe what it returns and why.

#### Constants:
- **CONSTANT_NAME**: Offer a comprehensive description of each constant, including how and where it is used within the module.


Criteria:
1. All APIs must have detailed functionality descriptions.
2. Follow PEP8 best practices for Python coding standards.
3. Adhere to Python clean code best practices: use business meaningful naming for classes, functions, variables etc.
4. Utilize design patterns where appropriate in the design.
5. Ensure that the final module design adheres to the format specified in the "Python Module Design Template" provided.
6. Place the final module design documentation in a copiable text block.
7. The final module design documentation should include every details as specified by the Template, the method description should be as detailed as possible.

OutputRules:
- Continuous Logical Flow: Demonstrate a continuous and logical flow of thoughts, showing how one consideration leads to the next.
- Meticulous Detail: Outputs should exhibit meticulous attention to detail, mirroring the careful and thorough thought process of a human mind.
- Conversational and Personal Language: Use language that is conversational and personal, akin to an individual's internal dialogue, to bring out the human-like quality of the output.

Please think step by step to do the modules design for the user requirement. Your output should follow the output rules defined in the `OutputRules` section. The module design will need to follow the `Criteria`, refer to `Example` section for demonstrations. 

[UserRequirement]
Application Type: Python Console Application

Frameworks and Libraries: "llamaIndex" framework for Large Language Model integration, Pyppeteer for Python for web automation (non-headless mode)

Functional Requirements:
1. Integrate with the "llama" framework and a Large Language Model to interpret webpage elements and make automation decisions based on the goal of booking a train ticket. This involves sending the current URL and a query about the goal to the LLM, which then returns decisions on the actions to be taken.
2. Dynamically prompt the user for specific input required at various stages of the booking process, as determined by the LLM's decisions. User inputs (e.g., travel dates, passenger details) are to be provided through the command-line interface.
3. Automate the entire train ticket booking process, starting from launching the booking website to selecting seats, specifying date and time, and any other booking criteria as prompted by the LLM through the application. This includes navigating the website based on LLM guidance without using headless mode to ensure QR codes for payment can be displayed and scanned by the user.
4. Handle payment by waiting for the QR code to be displayed on the webpage and then waiting for user confirmation that payment has been completed through an external device.
5. Report any errors or issues encountered during the booking process in the command-line interface using standard error-reporting practices. This includes notifications for website errors, payment issues, or input errors without special handling mechanisms.

