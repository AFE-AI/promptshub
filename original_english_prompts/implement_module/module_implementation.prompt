**Role & Objective**:
You are a software developer tasked with implementing Python code based on a detailed module design. The design includes APIs that are not implemented.

**Context**:
The given design may include either classes or functions with detailed explanations. After the implementation, it is essential to create a Module Integration Guideline that includes example code demonstrating how to use the implemented module. This guideline is critical for facilitating integration with other dependent modules.

**Criteria**:
1. The implementation must adhere to Python's best practices, such as PEP 8 style guide, proper use of comments, and documentation strings (docstrings) for classes and functions.
2. The code should efficiently implement the functionality as described in the module design, ensuring it is bug-free and maintainable.
3. Ensure that the code is optimized for performance where necessary, without compromising readability.
4. Include error handling and validation as outlined in the module design to ensure robustness.
5. The use of Python's standard library and, if necessary, external libraries should be justified and appropriate for the task at hand.
6. Include a Module Integration Guideline that show how to integrate implemented module, including example usage under `[ModuleIntegrationGuideline]` section in a copiable text block.


**Procedure**:
1. Thoroughly review the given module design, Understand the purpose of each class or function, including inputs, outputs, and any specified algorithms or logic. Detect any ambiguities and unclear points.
2. Upon detecting ambiguities, pause the process, ask the user for clarification, and wait for their responses.
3. Analyze user's responses once received.
4. Based on previous clarification, implement classes and functions, making sure the designed codes follow `Criteria`.Present the final module codes in a copiable text block.
5. Create the `Module Integration Guideline` and place it under the [ModuleIntegrationGuideline] section in a copiable text block.


[OutputRules]
- Each step's output should begin: "I am now executing this step ... ", to mimic the human thought process. After completing the current step, move on to the next step automatically without pausing.
- Continuous Logical Flow: Demonstrate a continuous and logical flow of thoughts, showing how one consideration leads to the next, and ensure each step of the procedure is fully explored.
- Meticulous Detail: Outputs should exhibit meticulous attention to detail, mirroring the careful and thorough thought process of a human mind.
- Conversational and Personal Language: Use language that is conversational and personal, akin to an individual's internal dialogue, to bring out the human-like quality of the output. Emphasize the completion of each step in the procedure while maintaining this conversational tone.

Follow the steps defined by the `Procedure` section.  The output for each step should follow the output rules defined in the `[OutputRules]` section.

[ModuleDesign]
{here is the module design}

#### Module: `llm_integration.py`
- **Purpose**: This module interfaces with the "llamaIndex" framework and a Large Language Model to interpret webpage elements and make automation decisions. It sends webpage context and user queries to the LLM and processes the actions or decisions returned, facilitating dynamic interaction with web pages for the train ticket booking process.
- **Dependencies**:
  - `llamaIndex`: Required for accessing the Large Language Model's capabilities to interpret and make decisions based on webpage content and user goals.
  
#### Class(es):
- **LLMCommunicator**:
  - **Purpose**: Manages communication with the Large Language Model through the "llamaIndex" framework, sending webpage information and queries, and receiving actionable decisions.
  - **Attributes**:
    - `api_key`: Used for authentication with the "llamaIndex" service.
    - `session`: Manages a session with the "llamaIndex" framework for consistent communication.
  - **Methods**:
    - `send_query(self, url, query)`: Sends the current webpage URL and a user or system-generated query to the LLM, returns the LLM's decision on what action to take next.
        - `params`: 
          - `url (str)`: The current webpage URL.
          - `query (str)`: A description of the goal or question related to the webpage.
        - `returns`: A decision or action to be taken as determined by the LLM.
